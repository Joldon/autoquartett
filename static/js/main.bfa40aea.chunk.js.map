{"version":3,"sources":["Card.js","hooks/useGame2.js","client.js","Pictures/Battle.png","Pictures/8_bit_boss_battle_4_by_eliteferrex.mp3","Pictures/super_street_fighter_2_turbo_8_bit_music_ryu_stage_4297822133384776681.mp3","App.js","reportWebVitals.js","index.js"],"names":["Card","character","flipped","currentValue","setCurrentValue","playerCard","icons","size","toggleClass","evt","console","log","target","parentElement","getAttribute","className","fields","name","src","picture","file","url","width","height","alt","map","attribute","onClick","stat","toLowerCase","useGame2","characters","useReducer","state","action","type","cards","player","payload","computer","currentCard","currentCards","newCards","playerWins","newPlayerCard","newComputerCard","dispatch","shuffleCards","i","length","j","Math","floor","random","splitCards","shuffledCards","half","ceil","splice","dealNewCards","playerCards","computerCards","shuffledPlayerCards","shuffledComputerCards","characterNames","currentPlayerCard","currentComputerCard","find","newPlayerCards","push","filteredComputerCards","filter","card","filteredPlayerCards","newComputerCards","client","contentful","space","process","accessToken","App","useState","setCharacters","useEffect","getEntries","then","response","items","json","catch","gameState","startGame","battle","nextCards","isGameOn","toggleGameOn","isGameOver","toggleGameOver","display","setDisplay","button","toggleButton","buttonDisabled","setButtonDisabled","computerVisible","setComputerVisible","winner","setWinner","music","setMusic","gameSong","Gamemusic","Gamemusic2","logo","playStatus","Sound","status","loop","volume","autoLoad","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfa40aea.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './Card.css'\nimport { GiBrain, GiMuscleUp, GiBodyHeight, GiSandsOfTime } from 'react-icons/gi';\nimport { BiSmile } from 'react-icons/bi';\n\nfunction Card({character, flipped, currentValue, setCurrentValue, playerCard}) {\n\n  const attributes = ['Height', 'Strength', 'Age', 'IQ', 'Funnyness']\n  const icons = {\n    'Height' : <GiBodyHeight size={'2rem'}/>,\n    'Strength' : <GiMuscleUp size={'2rem'}/>,\n    'Age' : <GiSandsOfTime size={'2rem'}/>,\n    'IQ': <GiBrain size={'2rem'}/>,\n    'Funnyness' : <BiSmile size={'2rem'}/>\n  }\n  \n\n\nconst toggleClass = (evt) => {\n  if (playerCard) {\n    console.log(currentValue === evt.target.parentElement.getAttribute('stat'))\n    if (currentValue === evt.target.parentElement.getAttribute('stat') || currentValue === evt.target.getAttribute('stat')){\n      setCurrentValue('')\n    } else if (!evt.target.getAttribute('stat')) {\n      setCurrentValue(evt.target.parentElement.getAttribute('stat'))\n    } else {\n      setCurrentValue(evt.target.getAttribute('stat'))\n      \n    }\n  }\n}\n\n\n    if (!flipped) {\n        return <div className=\"Character bgr--black\"></div>\n    } else {\n        return (\n      \n  <div className=\"Character\">\n    <div className=\"Character__name\">\n      {character[0].fields.name}\n    </div>\n    <img className=\"Character__picture\" src={`https:${character[0].fields.picture.fields.file.url}`} width='250' height='250' alt='characters'></img>\n    <div className='Character__attr-wrapper'>\n    \n    {attributes.map((attribute) => <div \n      onClick={toggleClass} \n      stat={attribute.toLowerCase()}// e.g. 'height'\n      className={`Character__attr ${currentValue === attribute.toLowerCase() ? 'Character__attr--active': null}`}\n      >{icons[attribute]} <p>{attribute}</p>{character[0].fields[attribute.toLowerCase()]}\n      </div> )}\n    </div>\n  </div>\n\n    )\n }\n} \n\nexport default Card","import { useReducer} from 'react'\n\nfunction useGame2(characters) {\n\n    // This is our initial game state. We only need the cards for player and computer and the currently dealt card.\n    // Everything else can be derived from this game state (game end, score, winner of the round)\n    const initialState = {\n        cards : {\n            player : [],\n            computer: []\n        },\n        currentCard : {\n            player: '',\n            computer: ''\n        }\n    }\n\n    // This is our reducer function, the only place where we actually change our state. It takes a user action and turns it\n    // into a change of the state.\n    function reducer(state, action) {\n        switch(action.type) {\n            case 'new game':\n                return {...state, \n                    cards: \n                    {\n                    player: [...action.payload.cards[0]], \n                    computer:[...action.payload.cards[1]]\n                    }, \n                    currentCard: \n                    {\n                    player: action.payload.currentCards[0], \n                    computer:action.payload.currentCards[1]\n                    }\n                }\n            case 'battle':\n                return {...state, \n                    cards: \n                    {\n                    player: [...action.payload.newCards[0]], \n                    computer:[...action.payload.newCards[1]]\n                    },\n                    playerWins: action.payload.playerWins\n                };\n            case 'next card':\n                return {...state,\n                    currentCard: \n                        {\n                        player: action.payload.newPlayerCard, \n                        computer: action.payload.newComputerCard\n                        },\n                    }\n            default:\n                return state\n        }\n    }\n\n    // Here we are simply putting intial State and reducer function together in React's useReducer Hook.\n    // We get the current state as a variable and the dispatch function that we use to send the user action to the reducer function\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    \n\n// ********************* NEW GAME ACTION *********************\n\n    // This function initiates the new game. It shuffles the cards from COntenful and splits them into two piles\n    // Then it deals the two currentCards. The dispatch function takes the action type 'new game'\n    // and it changes the initial State to the state with the new cards.\n    const newGame = () => {\n        const characterNames = characters.map(character => character.fields.name)\n        const shuffledCards = shuffleCards(characterNames);\n        const [playerCards, computerCards] = splitCards(shuffledCards)\n        const [currentPlayerCard, currentComputerCard] = dealNewCards(playerCards, computerCards)\n        dispatch({type: 'new game', payload: {\n            cards: [playerCards, computerCards],\n            currentCards: [currentPlayerCard, currentComputerCard]\n        }})\n   \n        return true // we return true here because on the App.js level this will tell us that the game has started.\n    }\n\n      // Function that shuffles the cards for us. It uses a shuffle algorithm and returns the shuffled array.\n    const shuffleCards = (cards) => {\n        for (let i = cards.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [cards[i], cards[j]] = [\n            cards[j],\n            cards[i],\n        ];\n        }\n        return cards; //gives us back the shuffled array (which contains only the characters name)\n    };\n\n// Function that splits the card pile into two of equal length using the splice method.\n    const splitCards = (shuffledCards) => {\n        const half = Math.ceil(shuffledCards.length / 2);\n        const firstHalf = shuffledCards.splice(0, half);\n        const secondHalf = shuffledCards.splice(-half);\n        return [firstHalf, secondHalf]\n    };\n\n    const dealNewCards = (playerCards, computerCards) => {\n        const shuffledPlayerCards = shuffleCards(playerCards)\n        const shuffledComputerCards = shuffleCards(computerCards)\n        return [shuffledPlayerCards[0], shuffledComputerCards[0]];\n    };\n    \n\n    // *********************BATTLE FUNCTION**************************\n    \n    // this function takes the selected Attribute and updates the score in the state according to the result.\n    const battle = (currentValue) => {\n        const currentPlayerCard = characters.find(character => character.fields.name === state.currentCard.player )\n        const currentComputerCard = characters.find(character => character.fields.name === state.currentCard.computer )\n        // now we can check for the win condition. The dispatch payload needs only a boolean if the player wins or loses\n        \n        if (currentPlayerCard.fields[currentValue] > currentComputerCard.fields[currentValue]) {\n            const newPlayerCards = [...state.cards.player]\n            newPlayerCards.push(state.currentCard.computer)\n            const newComputerCards = [...state.cards.computer]\n            const filteredComputerCards = newComputerCards.filter(card => card !== state.currentCard.computer)\n            dispatch({type: 'battle', payload: {\n                newCards: [newPlayerCards, filteredComputerCards]\n                }\n            })\n            console.log(currentPlayerCard)\n            return `${currentPlayerCard.fields[currentValue]} : ${currentComputerCard.fields[currentValue]}`\n        }\n        if (currentPlayerCard.fields[currentValue] <= currentComputerCard.fields[currentValue]) {\n            const newPlayerCards = [...state.cards.player]\n            const filteredPlayerCards = newPlayerCards.filter(card => card !== state.currentCard.player)\n            const newComputerCards = [...state.cards.computer]\n            newComputerCards.push(state.currentCard.player)\n            dispatch({type: 'battle', payload: {\n                newCards: [filteredPlayerCards, newComputerCards]\n                }\n            })\n            console.log(currentPlayerCard)\n            return `${currentPlayerCard.fields[currentValue]} : ${currentComputerCard.fields[currentValue]}`\n        }\n    };\n      \n    // ****************************NEXT CARD ACTION***********************\n\n    const nextCards = () => {\n        const [newPlayerCard, newComputerCard] = dealNewCards(state.cards.player, state.cards.computer)\n        dispatch({type: 'next card', payload: {\n            newPlayerCard: newPlayerCard, \n            newComputerCard: newComputerCard,\n            }\n        })\n        }\n\n\n\n    return [state, newGame, battle, nextCards]\n}\n\nexport default useGame2\n","import * as contentful from 'contentful'\n\nconst client = contentful.createClient({\n        space: process.env.REACT_APP_SPACE_ID,\n        accessToken: process.env.REACT_APP_ACCESS_TOKEN\n    })\n\n\nexport default client\n","export default __webpack_public_path__ + \"static/media/Battle.79b54f9d.png\";","export default __webpack_public_path__ + \"static/media/8_bit_boss_battle_4_by_eliteferrex.c4298542.mp3\";","export default __webpack_public_path__ + \"static/media/super_street_fighter_2_turbo_8_bit_music_ryu_stage_4297822133384776681.81b293a9.mp3\";","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Card from './Card'\nimport useGame2 from './hooks/useGame2'\nimport client from './client'\nimport logo from \"./Pictures/Battle.png\"\nimport Sound from 'react-sound'\nimport Gamemusic from './Pictures/8_bit_boss_battle_4_by_eliteferrex.mp3'\nimport Gamemusic2 from './Pictures/super_street_fighter_2_turbo_8_bit_music_ryu_stage_4297822133384776681.mp3'\nimport { GiSpeaker, GiSpeakerOff } from 'react-icons/gi';\n\n\nfunction App() {\n\n// Get the API Data from Contentful and put it into our character state\n\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    client.getEntries() //works like fetch method\n    .then(response => response.items)\n    .then((json) => {\n      setCharacters(json);\n      // setIsLoading(false);\n    })\n    .catch(console.log('request failed'));\n  }, [])\n\n// Bring in our Game Logic with the custom useGame Hook, pass in the characters\n\n  const [gameState, startGame, battle, nextCards] = useGame2(characters)\n\n  // Our UI State (dependent on the current Game State)\n  \n  // These are our global states, determining whether the game is running or if it is over\n  const [isGameOn, toggleGameOn] = useState(false)\n  const [isGameOver, toggleGameOver] = useState(false)\n  \n  // This state gives us the currently selected attribute that we need to compare\n  const [currentValue, setCurrentValue] = useState()\n  \n  // These are the states that change our UI (display, button, computerCard, game winner, music)\n  const [display, setDisplay] = useState('Select your weapons!');\n  const [button, toggleButton] = useState(true);\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n  const [computerVisible, setComputerVisible] = useState(false);\n  const [winner, setWinner] = useState('');\n  const [music, setMusic] = useState('PLAYING');\n\n  // useEffect to only start the game when the cards are dealt.\n    useEffect(() => {\n      if (gameState.cards.player.length) {\n        toggleGameOn(true)\n        \n      }\n    }, [gameState.cards])\n\n  //  useEffect that checks if the game has ended (calls the endGame function)\n    useEffect(() => {\n      if ((!gameState.cards.player.length || !gameState.cards.computer.length) && isGameOn) {\n        toggleGameOver(true)\n        setButtonDisabled(true)\n        if (!gameState.cards.player.length) {\n          setWinner('computer')\n          setDisplay('You lost this epic battle! What a bitter defeat. Try again.')\n        }\n        if (!gameState.cards.computer.length) {\n          setWinner('player')\n          setDisplay('You won this epic battle! What a glorious triumph!')\n        }\n      }\n    }, [gameState])\n    \n \n    // This triggers the start of the new game in the game logic and it triggers the start game changes in the UI\n  const handleNewGame = () => {\n    startGame()\n    toggleButton(true)\n    setButtonDisabled(false)\n    setComputerVisible(false)\n    toggleGameOver(false)\n    setDisplay('Select your weapons')\n  }\n\n  // As the new Game function this triggers the battle function in the game logic and also updates the UI\n  const handleBattle = () => {\n    if (isGameOn && currentValue) {\n      const display = battle(currentValue)\n      setDisplay(display)\n      toggleButton(false)\n      setComputerVisible(true)\n    }\n  }\n\n  // This function triggers the nextCard function in the game logic and it updates the UI (flipping computer Card etc)\n  const handleNextCards = () => {\n    if (isGameOn ) {\n      nextCards()\n      toggleButton(true)\n      setComputerVisible(false)\n      setDisplay('Select your weapons')\n      setCurrentValue('')\n      return\n    }\n  }\n\n  // A very small toggle Function for the music and the symnbol on the button (changing the music state when clicking)\nconst gameSong = [Gamemusic, Gamemusic2]\n\n\n  const handleMusic = () => {\n    if (music === 'PLAYING') {\n      setMusic('PAUSED')\n    }\n    if (music === 'PAUSED') {\n      setMusic('PLAYING')\n    }\n  }\n\n\n  return (\n     <div className=\"App__wrapper\">\n      <img src={logo} className=\"App__logo\" alt='Game Logo'/>\n       <Sound \n         url={gameSong[Math.floor(Math.random() * gameSong.length)]}\n         playStatus={Sound.status[music]}\n         loop={true}\n         volume={10}\n         autoLoad={true}      \n       />\n       <div className='App_upperrightwrapper'>\n          <div className=\"App__button--sound\" onClick={handleMusic}>\n          {music === 'PLAYING'? <GiSpeaker size={'4.8rem'}/> : <GiSpeakerOff size={'4.8rem'}/>}\n          </div>       \n          <button className=\"App__button--new-game\" onClick={handleNewGame}>\n            New Game\n          </button>\n      </div>  \n       <div className=\"App__display-and-counter\">\n         <div className=\"App__counter App__counter--player\">\n           {isGameOn? gameState.cards.player.length : '0'}\n         </div>\n       <div className=\"App__display\">{display}</div>\n         <div className=\"App__counter App__counter--computer\">\n           {isGameOn? gameState.cards.computer.length : '0'}\n         </div>                  \n       </div>\n       {isGameOver? \n       \n       <div className=\"App__gameover\">\n        <div className=\"App__gameover__text\">\n          {winner === 'computer'? 'YOU LOST' : 'YOU WON'}\n        </div>\n       </div> :\n       ''\n       }\n       <div className=\"App__characters\">\n         {isGameOn ? (\n           <Card\n             playerCard={true}\n             character={characters.filter(character => character.fields.name === gameState.currentCard.player)}\n             currentValue={currentValue}\n             setCurrentValue={setCurrentValue}\n             flipped={true}\n           />\n         ) : (\n           <Card character={null} flipped={false} />\n         )}\n         <div className='App__buttons'>\n         <div>\n         <button\n           className=\"App__button--battle\"\n           onClick={button ? handleBattle : handleNextCards}\n           disabled={buttonDisabled}\n         >\n           {button ? \"Battle\" : \"Next\"}\n         </button>\n          </div>\n          \n        </div>\n         {isGameOn ? (\n           <Card\n             playerCard={false}\n             character={characters.filter(character => character.fields.name === gameState.currentCard.computer)}\n             flipped={computerVisible? true : false}\n        \n           />\n         ) : (\n           <Card character={null} flipped={false} />\n         )}\n       </div>          \n     </div>\n     \n );}\n \n export default App;\n \n\n\n//  ****************** Game Logic that comes from the useGame Hook****************\n \n // const [playerCards, setPlayerCards] = useState([])\n // const [computerCards, setComputerCards] = useState([])\n\n // const [currentCards, setCurrentCards] = useState([])\n // const [cardsDealt, setCardsDealt] = useState(false)\n \n // this useEffect triggers when the playerCards/computerCards changes. It checks if there are any cards in the \n   // playerCard and the computerCard array. It also checks if the currentCard array is empty. Only if all of these\n   // conditions are true, it deals new Cards. This prevents the game from trying to deal new cards if there aren't any to deal\n   // useEffect(() => {\n   //   if (playerCards.length && computerCards.length && !currentCards.length) {\n   //     dealNewCards()\n   //     console.log(playerCards)\n   //   }\n   // }, [playerCards, computerCards])\n \n \n   // // Shuffle Function (taken from the Internet), takes characters Array and returns a shuffled Array\n   // const shuffleCards = () => {\n   //    const shuffledCharacters = [...characters] //define new array that will get shuffled (goes through the list and swaps two items randomly)\n   //     for (let i = shuffledCharacters.length - 1; i > 0; i--) {\n   //         const j = Math.floor(Math.random() * (i + 1));\n   //         [shuffledCharacters[i], shuffledCharacters[j]] = [shuffledCharacters[j], shuffledCharacters[i]];\n   //     }\n   //     return shuffledCharacters //gives us back the shuffled array\n   // }\n \n   // const dealNewCards = () => {\n   //   const oldPlayerCards = [...playerCards]\n   //   const playerCard = oldPlayerCards.shift() //removes the first Card from the playerCards array\n   //   setPlayerCards(oldPlayerCards) //sets the new Player Card State to the array without the dealt Card\n   //   const oldComputerCards = [...computerCards]\n   //   const computerCard = oldComputerCards.shift() //removes the first Card from the ComputerCards array\n   //   setComputerCards(oldComputerCards) //sets the new Computer Card State to the array without the dealt Card\n   //   setCurrentCards([playerCard, computerCard])\n   //   console.log(currentCards)\n   //   setCardsDealt(true)\n   // }\n \n   // const startGame = () => {\n   //   const shuffledCards = shuffleCards()\n   //   // shuffleCards() : this function gets activated immediately\n   //   // shuffleCards: this function is only a variable that stores the information of the function \n   //   // (use this if you DON'T want to activate the function but still want to share the information)\n    \n   //   const half = Math.ceil(shuffledCards.length / 2); \n   //   const firstHalf = shuffledCards.splice(0, half)\n   //   const secondHalf = shuffledCards.splice(-half)\n   //   setPlayerCards([...firstHalf])\n   //   setComputerCards([...secondHalf])\n   // }\n \n   // const compareAttribute = () => {\n   //   if (currentCards[0].fields[currentValue] > currentCards[1].fields[currentValue]) {\n   //     setDisplay('You win!')\n   //     setPlayerCards([...playerCards, ...currentCards])\n \n   //   } else { \n   //     setDisplay('You lose!')\n   //     setComputerCards([...computerCards, ...currentCards])\n   //   }\n    \n   //   toggleButton(false)\n   // };\n \n   //   const nextCards = () => {\n   //     if (playerCards.length && computerCards.length) {\n   //       compareAttribute()\n   //       return\n   //     }\n   //     checkWinCondition()\n   //   }\n \n   //   const checkWinCondition = () => {\n   //     if (playerCards.length === 0) {\n   //       endGame('Computer')\n   //       return\n   //     }\n   //     if (computerCards.length === 0) {\n   //       endGame('Player')\n   //       return\n   //     }\n   //   }\n \n   //   const endGame = (winner) => {\n   //     if (winner === 'Player') {\n   //       setDisplay('Congratulations. What a glorious win!')\n   //     }\n   //     if (winner === 'Computer') {\n   //       setDisplay('A bitter defeat. Try again.')\n   //     }\n   //     setPlayerCards([])\n   //     setComputerCards([])\n   //     setCurrentCards([])\n   //   }\n \n   //   const newCards = () => {\n   //     dealNewCards()\n   //     toggleButton(true)\n   //   }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}